#WRITTEN BY SOLOMON UDOCHI

#This function uses sinkr (source code embedded), vegan, MASS, ggplot2, svglite, grid, and ggthemes to:
#(i) perform the BVstep procedure and provide outputs,
#N.B.: BVstep input can take flexible fixed and variable matrices, with 
#user specifying what distances to use. Therefore, a BIO-BIO, BIO-ENV,
#ENV-BIO, or ENV-ENV analysis can be done. 
#see http://menugget.blogspot.com/2011/06/clarke-and-ainsworths-bioenv-and-bvstep.html for more details
#(ii) create n specified permutations of the variable matrix using specified distance.
#(iii) Plot trend of permuted matrices using Bray-Curtin and Chi-sq distances to show randomness.
##The trend plots are displayed and then saved as high-res files (.svg and .tiff) in your working directory
#(iv) perform the globalBEST significance test (Clarke et al., 2008) using
#both the actual BEST correlation coeff. and those from the permuted data
#(iv) plot the globalBEST results as a histogram of permuted correlation coefficients
#which shows the actual coefficient and p-value.
#The histogram is also displayed and then saved in your working directory
#as high-resolution .svg and .tiff extensions.

#Output of the function is a list with 6 items:
#     $BVstep_results          = BVstep results. A list of 6 items.See BVstep output in the sinkr package.
#                               $order.by.best  #order results by best corr. coeff.
#                               $order.by.i.comb #order results by number of variable combinations.
#                               $best.model.vars #best var. combination (i.e. with highest corr. coeff.)
#                               $best.model.rho  # corr. coeff. for best var. comb.
#                               $var.always.include #vars. chosen to always include in model
#                               $var.exclude #vars. chosen to always exclude in model

#     $permuted_best_corr      = variable containing n specified best correlations 
#                               from the bioenv analysis on permuted data. Can be saved as .csv
#     $permutation_trends     = List of 2 containing: $chisq = chisq trend values
#                                                     $bray = Bray-Curtis trend values
#     $t                       = number of times where permuted BEST corr is >= actual BEST corr
#     $p                       = upper limit of p-value of the global best test
#     $global.best.plot       = plot of global best test with p-value upper limit

#Note that BVstep here is CPU-demanding and may take several minutes to complete



#   Example implementation
#   gBVstep <- global.BVstep(
#                       fix.mat = community.data,
#                       var.mat = Env.data,
#                       var.mat.type = "count"
#                       nperm = 999,
#                       fix.dist.method = "bray",
#                       var.dist.method = "euclidean",
#                       scale.fix = "False",
#                       scale.var = "TRUE",
#                       max.rho = 0.95,
#                       min.delta.rho = 0.001,
#                       random.selection = TRUE,
#                       prop.selected.var = 0.5,
#                       num.restarts = 50,
#                       var.always.include = NULL,
#                       var.exclude = NULL,
#                       output.best = 10)


#   gBVstep$BVStep_results$best.model.vars   #to view BVstep best combinations results

#   gBVstep$BVStep_results$best.model.rho   #to view coeff. of BVstep best combinations results

#   length(gBVstep$permuted_best_corr)   #to confirm number permuted best correlations

#   gBVstep$permutation_trends$bray     #to view Bray-Curtis permuted trend data

#   gBVstep$permutation_trends$chisq      #to view chisq permuted trend data

#    gBVstep$t  #to view t, where t of T permutations have best corrs >= actual best corr

#    gBVstep$p    #to view upper limit of p-value

#   gBVstep$global.best.plot     #to view global BEST plot




global.BVstep <- function(
  fix.mat
  #Dataframe containing the fixed matrix
  #arranged with rows representing samples
  #and columns representing variables.
  #Only include variable and not site names, which can be included as row names.
  #For permutation, negative numbers are converted into absolute values.
  #Transform data as applicable before inputting.
  , 
  
  var.mat
  #Dataframe containing the variable matrix
  #arranged with rows representing samples
  #and columns representing variables.
  #Only include variable and not site names, which can be included as row names.
  #For permutation, negative numbers are converted into absolute values.
  #Transform data as applicable before inputting.
  
  , 
  
  var.mat.type = "count"
  #Type of variable matrix. 
  #This can be either "count" for count data or "prab" for presence/absence data.
  #The value provided here is an input for the permutation (see vegan Permatfull function).
  #This is only important when the biotic matrix is varied.
  
  ,
  nperm = 999
  #Number of permutations.
  #Use 999 for p < 0.001.
  
  , 
  fix.dist.method = "bray"
  #Distance measure (i.e. dissimilarity index) for the fixed matrix
  #Partial match to "manhattan", "euclidean", "canberra",
  #"clark", "bray", "kulczynski", "jaccard", "gower", "altGower", "morisita",
  #"horn", "mountford", "raup", "binomial", "chao", "cao", "mahalanobis",
  #"chisq" or "chord". All are provided in the R package "vegan".
  
  , 
  var.dist.method  = "euclidean"
  #Distance measure (i.e. dissimilarity index) for the variable matrix
  #Partial match to "manhattan", "euclidean", "canberra",
  #"clark", "bray", "kulczynski", "jaccard", "gower", "altGower", "morisita",
  #"horn", "mountford", "raup", "binomial", "chao", "cao", "mahalanobis",
  #"chisq" or "chord". All are provided in the R package "vegan".
  
  ,
  scale.fix  = F
  #Logical input (T or F) whether to scale fixed matrix.
  #If T, data is standardised to zero mean and unit std.
  
  ,
  scale.var  = T
  #Logical input (T or F) whether to scale variable matrix.
  #If T, data is standardised to zero mean and unit std.
  
  ,
  max.rho  = 0.95
  #Correlation coefficient to define matching matrices.
  #value between 0 and 1. Clarke & Warwick (1998) use 0.95.
  
  ,
  min.delta.rho = 0.001
  #Threshold corr. coeffs. to define "substantial" change in 
  #correlation during the backward removal phase
  #0.001 is recommended
  
  
  ,random.selection = T
  #Logical input (T or F) whether to begin analysis by
  #randomly subsetting variable matrix.
  #False, and iterations would begin with 
  #the whole variables in the matrix.
  
  ,prop.selected.var = 0.5
  #proportion of the total number of variables to be selected
  #in subseting/exploring the variable matrix per iteration
  #Takes value 0 - 1. 0.5 is recommended.
  
  ,num.restarts = 50
  #number of iterations
  #50 is recommended
  
  ,var.always.include = NULL
  #List of variables to always include in the iterations.
  #e.g. c(1:5), where 1 - 5 represent variable positions
  #in the matrix.
  #If there's no preference, use NULL
  
  ,var.exclude= NULL
  #List of variables to always exclude from the iterations.
  #e.g. c(1:5), where 1 - 5 represent variable positions
  #in the matrix.
  #If there's no preference, use NULL
  
  ,output.best = 10
  #Number of best combinations in output
){
  #BVstep function according to sinkr. http://menugget.blogspot.com/2011/06/clarke-and-ainsworths-bioenv-and-bvstep.html
  BVstep <- function(fix.mat, var.mat, 
                      fix.dist.method, 
                     var.dist.method,
                      scale.fix, scale.var,
                      max.rho,
                      min.delta.rho ,
                      random.selection,
                      prop.selected.var,
                      num.restarts,
                      var.always.include,
                      var.exclude ,
                      output.best 
  ){
    
    if(dim(fix.mat)[1] != dim(var.mat)[1]){stop("fixed and variable matrices must have the same number of rows")}
    if(sum(var.always.include %in% var.exclude) > 0){stop("var.always.include and var.exclude share a variable")}
    require(vegan)
    
    if(scale.fix){fix.mat<-scale(fix.mat)}else{fix.mat<-fix.mat}
    if(scale.var){var.mat<-scale(var.mat)}else{var.mat<-var.mat}
    
    fix.dist <- vegdist(as.matrix(fix.mat), method=fix.dist.method)
    
    #an initial removal phase
    var.dist.full <- vegdist(as.matrix(var.mat), method=var.dist.method)
    full.cor <- suppressWarnings(cor.test(fix.dist, var.dist.full, method="spearman"))$estimate
    var.comb <- combn(1:ncol(var.mat), ncol(var.mat)-1)
    RES <- data.frame(var.excl=rep(NA,ncol(var.comb)), n.var=ncol(var.mat)-1, rho=NA)
    for(i in 1:dim(var.comb)[2]){
      var.dist <- vegdist(as.matrix(var.mat[,var.comb[,i]]), method=var.dist.method)
      temp <- suppressWarnings(cor.test(fix.dist, var.dist, method="spearman"))
      RES$var.excl[i] <- c(1:ncol(var.mat))[-var.comb[,i]]
      RES$rho[i] <- temp$estimate
    }
    delta.rho <- RES$rho - full.cor
    exclude <- sort(unique(c(RES$var.excl[which(abs(delta.rho) < min.delta.rho)], var.exclude)))
    
    if(random.selection){
      num.restarts=num.restarts
      prop.selected.var=prop.selected.var
      prob<-rep(1,ncol(var.mat))
      if(prop.selected.var< 1){
        prob[exclude]<-0
      }
      n.selected.var <- min(sum(prob),prop.selected.var*dim(var.mat)[2])
    } else {
      num.restarts=1
      prop.selected.var=1  
      prob<-rep(1,ncol(var.mat))
      n.selected.var <- min(sum(prob),prop.selected.var*dim(var.mat)[2])
    }
    
    RES_TOT <- c()
    for(i in 1:num.restarts){
      step=1
      RES <- data.frame(step=step, step.dir="F", var.incl=NA, n.var=0, rho=0)
      attr(RES$step.dir, "levels") <- c("F","B")
      best.comb <- which.max(RES$rho)
      best.rho <- RES$rho[best.comb]
      delta.rho <- Inf
      selected.var <- sort(unique(c(sample(1:dim(var.mat)[2], n.selected.var, prob=prob), var.always.include)))
      while(best.rho < max.rho & delta.rho > min.delta.rho & RES$n.var[best.comb] < length(selected.var)){
        #forward step
        step.dir="F"
        step=step+1
        var.comb <- combn(selected.var, RES$n.var[best.comb]+1, simplify=FALSE)
        if(RES$n.var[best.comb] == 0){
          var.comb.incl<-1:length(var.comb)
        } else {
          var.keep <- as.numeric(unlist(strsplit(RES$var.incl[best.comb], ",")))
          temp <- NA*1:length(var.comb)
          for(j in 1:length(temp)){
            temp[j] <- all(var.keep %in% var.comb[[j]]) 
          }
          var.comb.incl <- which(temp==1)
        }
        
        RES.f <- data.frame(step=rep(step, length(var.comb.incl)), step.dir=step.dir, var.incl=NA, n.var=RES$n.var[best.comb]+1, rho=NA)
        for(f in 1:length(var.comb.incl)){
          var.incl <- var.comb[[var.comb.incl[f]]]
          var.incl <- var.incl[order(var.incl)]
          var.dist <- vegdist(as.matrix(var.mat[,var.incl]), method=var.dist.method)
          temp <- suppressWarnings(cor.test(fix.dist, var.dist, method="spearman"))
          RES.f$var.incl[f] <- paste(var.incl, collapse=",")
          RES.f$rho[f] <- temp$estimate
        }
        
        last.F <- max(which(RES$step.dir=="F"))
        RES <- rbind(RES, RES.f[which.max(RES.f$rho),])
        best.comb <- which.max(RES$rho)
        delta.rho <- RES$rho[best.comb] - best.rho 
        best.rho <- RES$rho[best.comb]
        
        if(best.comb == step){
          while(best.comb == step & RES$n.var[best.comb] > 1){
            #backward step
            step.dir="B"
            step <- step+1
            var.keep <- as.numeric(unlist(strsplit(RES$var.incl[best.comb], ",")))
            var.comb <- combn(var.keep, RES$n.var[best.comb]-1, simplify=FALSE)
            RES.b <- data.frame(step=rep(step, length(var.comb)), step.dir=step.dir, var.incl=NA, n.var=RES$n.var[best.comb]-1, rho=NA)
            for(b in 1:length(var.comb)){
              var.incl <- var.comb[[b]]
              var.incl <- var.incl[order(var.incl)]
              var.dist <- vegdist(as.matrix(var.mat[,var.incl]), method=var.dist.method)
              temp <- suppressWarnings(cor.test(fix.dist, var.dist, method="spearman"))
              RES.b$var.incl[b] <- paste(var.incl, collapse=",")
              RES.b$rho[b] <- temp$estimate
            }
            RES <- rbind(RES, RES.b[which.max(RES.b$rho),])
            best.comb <- which.max(RES$rho)
            best.rho<- RES$rho[best.comb]
          }
        } else {
          break()
        }
        
      }
      
      RES_TOT <- rbind(RES_TOT, RES[2:dim(RES)[1],])
      print(paste(round((i/num.restarts)*100,3), "% finished"))
    }
    
    RES_TOT <- unique(RES_TOT[,3:5])
    
    
    if(dim(RES_TOT)[1] > output.best){
      order.by.best <- RES_TOT[order(RES_TOT$rho, decreasing=TRUE)[1:output.best],]
    } else {
      order.by.best <-  RES_TOT[order(RES_TOT$rho, decreasing=TRUE), ]
    }
    rownames(order.by.best)<-NULL
    
    order.by.i.comb <- c()
    for(i in 1:length(selected.var)){
      f1 <- which(RES_TOT$n.var==i)
      f2 <- which.max(RES_TOT$rho[f1])
      order.by.i.comb <- rbind(order.by.i.comb, RES_TOT[f1[f2],])
    }
    rownames(order.by.i.comb)<-NULL
    
    if(length(exclude)<1){var.exclude=NULL} else {var.exclude=exclude}
    out <- list(
      order.by.best=order.by.best,
      order.by.i.comb=order.by.i.comb,
      best.model.vars=paste(colnames(var.mat)[as.numeric(unlist(strsplit(order.by.best$var.incl[1], ",")))], collapse=","),
      best.model.rho= round(order.by.best$rho[1], digits = 2),
      var.always.include=var.always.include,
      var.exclude=var.exclude
    )
    out
    
  } #BVstep function according to sinkr - http://menugget.blogspot.com/2011/06/clarke-and-ainsworths-bioenv-and-bvstep.html
  
  require(vegan)
  require(ggplot2)
  require(svglite)
  require(MASS)
  require(grid)
  require(ggthemes)
  
  
  
  
  #absolute values of variable matrix for permutations
  var.mat.abs <- as.matrix(abs(var.mat))
  
  #global best permutation test for env mat
  
  #
  #
  nperm <- nperm
  #
  #permuting matrices
  var.mat.list <- permatfull(var.mat.abs,
                             fixedmar = "columns",
                             mtype = var.mat.type,
                             times = nperm,
                             strata = NULL,
                             shuffle = "samp")
  
  #trend plots for permuted data
  perm.plot.trend.bray <- plot(var.mat.list, type = "bray") #Bray Curtis dissimilarities
  perm.plot.trend.chisq <- plot(var.mat.list, type = "chisq") #Chi-square values
  permutation_trends <- list(bray = perm.plot.trend.bray, chisq = perm.plot.trend.chisq)
  
  #Save plots as .svg 
  
  svg(filename="Trend plot Bray.svg", 
      width=9.7, 
      height=7.43, 
      pointsize = 12)
  plot(var.mat.list, type = "bray")
  dev.off()
  
  
  svg(filename="Trend plot Chi-sq.svg", 
      width=9.7, 
      height=7.43, 
      pointsize = 12)
  plot(var.mat.list, type = "chisq")
  dev.off()
  
  #Save plots as .tiff
  tiff("Trend plot Bray.tiff",
       width = 130, height = 100, 
       units = "mm", res=300)
  plot(var.mat.list, type = "bray")
  dev.off()
  
  
  
  tiff("Trend plot Chi-sq.tiff",
       width = 130, height = 100, 
       units = "mm", res=300)
  plot(var.mat.list, type = "chisq")
  dev.off()
  
  
  var.mat.list2 <- list()   #list to contain permuted dataframes
  
  #function to convert permuted matrices to dataframe and put them in a list
  for (i in 1:nperm){
    
    sub <- as.data.frame(var.mat.list$perm[[i]])
    var.mat.list2[[i]] <- sub
  }
  
  #BVstep on the actual variable matrix
  
  BVstep.corr.actual <- BVstep(fix.mat = fix.mat,
                        var.mat = var.mat,
                        fix.dist.method = fix.dist.method,
                        var.dist.method = var.dist.method,
                        scale.fix = scale.fix,
                        scale.var = scale.var,
                        max.rho = max.rho,
                        min.delta.rho = min.delta.rho,
                        random.selection = random.selection,
                        prop.selected.var = prop.selected.var,
                        num.restarts = num.restarts,
                        var.always.include = var.always.include,
                        var.exclude = var.exclude,
                        output.best = output.best)
  best.corr.actual <- BVstep.corr.actual$best.model.rho
  
  
  
  
  #function to loop BVstep analysis and extract best correlation for permuted matrices
  
  best.corr <- c() #variable to save best correlation of permuted BVstep analyses
  
  for (i in 1:nperm){
    var.mat2 = var.mat.list2[[i]]
    
     
    BVstep.corr <- BVstep(fix.mat = fix.mat,
                          var.mat = var.mat2,
                          fix.dist.method = fix.dist.method,
                          var.dist.method = var.dist.method,
                          scale.fix = scale.fix,
                          scale.var = scale.var,
                          max.rho = max.rho,
                          min.delta.rho = min.delta.rho,
                          random.selection = random.selection,
                          prop.selected.var = prop.selected.var,
                          num.restarts = num.restarts,
                          var.always.include = var.always.include,
                          var.exclude = var.exclude,
                          output.best = output.best)
    best.corr[i] <- BVstep.corr$best.model.rho
  }
  
  
  
  #Test of significance for bioenv
  
  
  t <- length(best.corr[best.corr >= best.corr.actual])   #number of permuted best greater than actual best
  
  
  Total <- nperm #total number of permutations
  
  
  
  p <- (t + 1)/(Total + 1) #upper limit of p value of permutations
  
  
  #
  #
  #
  #
  #
  #Plot histogram in ggplot with p value
  #function creating the theme used in the plot
  theme_Publication6.2 <- function(base_size=14, base_family="sans") {
    
    (theme_foundation(base_size=base_size, base_family=base_family)
     + theme(plot.title = element_text(face = "italic",
                                       size = rel(0.8), hjust = 0.5,
                                       margin = margin (b = 0)),
             text = element_text(),
             panel.background = element_rect(colour = "black"),
             plot.background = element_rect(colour = NA),
             panel.border = element_rect(colour = NA),
             axis.title = element_text(face = "bold",size = rel(0.8)),
             axis.title.y = element_text(angle=90,vjust =3),
             axis.title.x = element_text(vjust = -0.2),
             axis.text.x = element_text(face="bold",size = rel(1)),
             axis.text.y = element_text(face="bold",size = rel(1)),
             axis.line = element_line(colour="black"),
             axis.ticks = element_line(),
             panel.grid.major = element_blank(),
             panel.grid.minor = element_blank(),
             legend.key = element_rect(colour = NA),
             legend.position = "top",
             legend.direction = "horizontal",
             legend.key.size= unit(0.5, "cm"),
             #legend.title = element_text(face="italic"),
             legend.title = element_blank(),
             legend.margin = margin(t=0, unit= "cm"),
             legend.text=element_text(face="bold"),
             plot.margin=unit(c(2,2,2,3),"mm"),
             strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
             strip.text = element_text(face="bold")
     )
    )
    
    
  }
  
  #plotting the histogram
  
  data.frame <- data.frame (corr = best.corr)
  
  #first line of plot to get the max count
  best.plot <- ggplot(data.frame, aes(x = corr))+
    geom_histogram(colour = "grey30", fill = "grey90")
  
  #extract max count using ggbuild to help annotate text
  max.count <- max(ggplot_build(best.plot)$data[[1]]$count)
  min.count <- min(ggplot_build(best.plot)$data[[1]]$count)
  x.max <- max(ggplot_build(best.plot)$data[[1]]$x) #max x axis
  
  #x location of p-value annotation
  if (x.max < best.corr.actual) {
    xloc <- best.corr.actual*0.9
  } else {
    xloc <- x.max*0.9
  }
  
  
  
  #continue plot with annotation
  global.best.plot <- best.plot+
    theme_Publication6.2() +
    annotate("text", x = xloc, y = max.count, 
             label = "p-val",
             size = rel(2.5), fontface = "bold")+
    annotate("text", x = xloc, y = max.count*0.9, 
             label = bquote(bold(.(p))),
             size = rel(2.5), fontface = "bold")+
    annotate("text", x = best.corr.actual, y = max.count/3.1, 
             label = bquote(bold(rho[s] *"="* .(best.corr.actual))),
             size = rel(2.5), fontface = "bold")+
    annotate("text", x = best.corr.actual, y = max.count/2.5, 
             label = "BEST",
             size = rel(2.5), fontface = "bold")+
    annotate(geom = "segment", x = best.corr.actual,xend = best.corr.actual,
             y = max.count/3.5, yend = min.count,
             arrow = arrow(length = unit(2, "mm")))+
    labs(x = bquote(bold(Matching~ coefficient~ rho[s])), 
         y = bquote(bold(Frequency~ ( .(nperm)~ perms))))
  
  
  
  ggsave(
    "BEST corr plot.svg",
    plot = global.best.plot,
    device = "svg",
    scale = 1,
    width = 13,
    height = 7.43,
    units = "cm"
  )
  
  tiff("BEST corr plot.tiff",
       width = 130, height = 74.3, 
       units = "mm", res=300)
  print(global.best.plot)
  dev.off()
  
  
  out <- list(
    
    BVStep_results = BVstep.corr.actual, #BVStep results. See BVstep output in the sinkr package
    permuted_best_corr = best.corr, #list of nperm best correlations from bioenv analysis on permuted data
    permutation_trends = permutation_trends, #List of 2 containing: $chisq = chisq trend values
    #                     $bray = Bray-Curtis trend values
    t = t, #number of times where permuted BEST corr is >= actual BEST corr
    p = p, #upper limit of p-value of global best test
    global.best.plot = global.best.plot #plot of global best test
  )
  out
  
  
}
